#!/usr/bin/env python3
"""
Analyseur de Cambriolages - Interface Textuel Interactive (TUI)
Utilise Textual pour une interface moderne en terminal
"""

import asyncio
import geopandas as gpd
import pandas as pd
from geopy.geocoders import Nominatim
from geopy.distance import geodesic
from shapely.geometry import Point
import re
import time
from datetime import datetime

from textual.app import App, ComposeResult
from textual.containers import Container, Horizontal, Vertical, ScrollableContainer
from textual.widgets import (
    Header, Footer, Input, Button, Static, DataTable, ProgressBar, 
    TextArea, TabbedContent, TabPane, Label, Tree
)
from textual.reactive import reactive
from rich.text import Text
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.console import Console

class CambriolageAnalyzer:
    def __init__(self):
        self.geolocator = Nominatim(user_agent="analyseur_tui_v1", timeout=10)
        self.donnees_annuelles = {}
        self.donnees_completes = None
        self.unites_urbaines = None
        self.loaded = False
    
    async def charger_donnees(self, progress_callback=None):
        """Charge les donn√©es de fa√ßon asynchrone"""
        annees = ['2019', '2020', '2021', '2022']
        total = len(annees)
        
        for i, annee in enumerate(annees):
            try:
                if progress_callback:
                    await progress_callback(i, total, f"Chargement {annee}...")
                
                fichier = f"cambriolageslogementsechelleinfracommunale.{annee}.shp"
                gdf = gpd.read_file(fichier)
                self.donnees_annuelles[annee] = gdf
                
                # Petit d√©lai pour permettre √† l'UI de se rafra√Æchir
                await asyncio.sleep(0.1)
                
            except Exception as e:
                if progress_callback:
                    await progress_callback(i, total, f"Erreur {annee}: {str(e)[:30]}")
                continue
        
        # Combiner les donn√©es
        if self.donnees_annuelles:
            all_data = list(self.donnees_annuelles.values())
            self.donnees_completes = pd.concat(all_data, ignore_index=True)
            self.unites_urbaines = self.donnees_completes[['code_uu', 'libelle_uu']].drop_duplicates()
            self.loaded = True
            
        if progress_callback:
            await progress_callback(total, total, "Donn√©es charg√©es !")
    
    async def geocoder_adresse(self, adresse):
        """G√©ocode une adresse de fa√ßon asynchrone"""
        try:
            loop = asyncio.get_event_loop()
            location = await loop.run_in_executor(None, self.geolocator.geocode, adresse + ", France")
            
            if location:
                return location.latitude, location.longitude, location.address
            return None, None, None
            
        except Exception as e:
            return None, None, str(e)
    
    def analyser_zone_dans_polygone(self, lat, lon):
        """Trouve les zones exactes contenant le point"""
        if not self.loaded:
            return []
            
        point_recherche = Point(lon, lat)
        zones_trouvees = []
        
        for annee, gdf in self.donnees_annuelles.items():
            try:
                mask = gdf.geometry.contains(point_recherche)
                zones_dans_polygone = gdf[mask]
                
                for _, zone in zones_dans_polygone.iterrows():
                    zones_trouvees.append({
                        'annee': annee,
                        'code_uu': zone['code_uu'],
                        'libelle_uu': zone['libelle_uu'],
                        'classe': zone['classe'],
                        'risque_num': self.extraire_valeur_numerique(zone['classe'])
                    })
            except:
                continue
        
        return zones_trouvees
    
    def trouver_unites_urbaines_proches(self, lat, lon, distance_max=50):
        """Trouve les UU proches du point"""
        if not self.loaded:
            return []
            
        point_recherche = Point(lon, lat)
        resultats = []
        
        # Utiliser une ann√©e comme √©chantillon
        sample_data = self.donnees_annuelles.get('2022', list(self.donnees_annuelles.values())[0])
        
        for _, row in sample_data.iterrows():
            try:
                centroid = row.geometry.centroid
                distance = geodesic((lat, lon), (centroid.y, centroid.x)).kilometers
                
                if distance <= distance_max:
                    resultats.append({
                        'code_uu': row['code_uu'],
                        'libelle_uu': row['libelle_uu'],
                        'distance_km': distance
                    })
            except:
                continue
        
        # Supprimer doublons et trier
        df_resultats = pd.DataFrame(resultats).drop_duplicates(subset=['code_uu']).sort_values('distance_km')
        return df_resultats.to_dict('records')
    
    def analyser_unite_urbaine(self, code_uu):
        """Analyse compl√®te d'une UU"""
        if not self.loaded:
            return None
            
        donnees_uu = self.donnees_completes[self.donnees_completes['code_uu'] == code_uu]
        
        if donnees_uu.empty:
            return None
        
        analyse_par_annee = {}
        zones_a_risque = []
        
        for annee in ['2019', '2020', '2021', '2022']:
            donnees_annee = donnees_uu[donnees_uu['annee'] == annee]
            
            if donnees_annee.empty:
                continue
                
            # Classification par risque
            risque_faible = len(donnees_annee[donnees_annee['classe'].str.contains('moins de', case=False, na=False)])
            risque_eleve = len(donnees_annee[donnees_annee['classe'].str.contains('plus de', case=False, na=False)])
            risque_moyen = len(donnees_annee) - risque_faible - risque_eleve
            
            analyse_par_annee[annee] = {
                'total': len(donnees_annee),
                'faible': risque_faible,
                'moyen': risque_moyen,
                'eleve': risque_eleve,
                'classes': list(donnees_annee['classe'].unique())
            }
            
            # Zones dangereuses
            zones_danger = donnees_annee[
                donnees_annee['classe'].str.contains('plus de|de [1-9][0-9]', case=False, na=False, regex=True)
            ]
            
            for _, zone in zones_danger.iterrows():
                zones_a_risque.append({
                    'annee': zone['annee'],
                    'classe': zone['classe'],
                    'risque_num': self.extraire_valeur_numerique(zone['classe'])
                })
        
        return {
            'code_uu': code_uu,
            'libelle_uu': donnees_uu.iloc[0]['libelle_uu'],
            'analyse_par_annee': analyse_par_annee,
            'zones_a_risque': zones_a_risque
        }
    
    def extraire_valeur_numerique(self, classe):
        """Convertit une classe en valeur num√©rique"""
        try:
            if 'moins de' in classe:
                match = re.search(r'moins de (\d+(?:,\d+)?)', classe)
                if match:
                    return float(match.group(1).replace(',', '.'))
            elif 'plus de' in classe:
                match = re.search(r'plus de (\d+(?:,\d+)?)', classe)
                if match:
                    return float(match.group(1).replace(',', '.'))
            elif 'de ' in classe and ' √† ' in classe:
                match = re.search(r'de (\d+(?:,\d+)?) √† (\d+(?:,\d+)?)', classe)
                if match:
                    val1 = float(match.group(1).replace(',', '.'))
                    val2 = float(match.group(2).replace(',', '.'))
                    return (val1 + val2) / 2
        except:
            pass
        return 0

class CambriolageApp(App):
    """Application Textual pour l'analyse des cambriolages"""
    
    CSS_PATH = None
    CSS = """
    .title {
        dock: top;
        height: 3;
        background: $boost;
        color: $text;
        text-align: center;
        content-align: center middle;
    }
    
    .search-box {
        dock: top;
        height: 5;
        background: $surface;
        padding: 1;
    }
    
    .results {
        scrollbar-gutter: stable;
    }
    
    .status-bar {
        dock: bottom;
        height: 3;
        background: $primary;
        color: $text;
    }
    
    .loading {
        background: $warning;
        color: $text;
        text-align: center;
        padding: 1;
    }
    
    .error {
        background: $error;
        color: $text;
        padding: 1;
    }
    
    .success {
        background: $success;
        color: $text;
        padding: 1;
    }
    
    .risk-high {
        background: $error;
        color: $text;
    }
    
    .risk-medium {
        background: $warning;
        color: $text;
    }
    
    .risk-low {
        background: $success;
        color: $text;
    }
    """
    
    def __init__(self):
        super().__init__()
        self.analyzer = CambriolageAnalyzer()
        self.current_results = None
    
    def compose(self) -> ComposeResult:
        """Cr√©e l'interface utilisateur"""
        yield Header()
        
        with Vertical():
            yield Static("üè† ANALYSEUR DE CAMBRIOLAGES - DONN√âES G√âOGRAPHIQUES PR√âCISES", classes="title")
            
            with Container(classes="search-box"):
                yield Input(placeholder="Entrez une adresse (ex: 10 rue de la R√©publique, 69002 Lyon)", id="address-input")
                with Horizontal():
                    yield Button("üîç Analyser", variant="primary", id="analyze-btn")
                    yield Button("üìã Lister les villes", variant="default", id="list-btn")
                    yield Button("‚ÑπÔ∏è  Aide", variant="default", id="help-btn")
            
            with TabbedContent():
                with TabPane("üéØ R√©sultats", id="results-tab"):
                    yield ScrollableContainer(
                        Static("Entrez une adresse pour commencer l'analyse", id="results-content"),
                        classes="results"
                    )
                
                with TabPane("üìä Statistiques", id="stats-tab"):
                    yield ScrollableContainer(
                        Static("Statistiques appara√Ætront ici apr√®s une recherche", id="stats-content"),
                        classes="results"
                    )
                
                with TabPane("üó∫Ô∏è  Villes", id="cities-tab"):
                    yield ScrollableContainer(
                        Static("Chargement de la liste des villes...", id="cities-content"),
                        classes="results"
                    )
        
        yield Footer()
    
    async def on_mount(self) -> None:
        """Initialisation de l'application"""
        self.title = "Analyseur de Cambriolages"
        self.sub_title = "Interface moderne en terminal"
        
        # Charger les donn√©es au d√©marrage
        await self.charger_donnees_initiales()
    
    async def charger_donnees_initiales(self):
        """Charge les donn√©es au d√©marrage avec indicateur de progression"""
        results_widget = self.query_one("#results-content")
        results_widget.update("üîÑ Chargement des donn√©es g√©ographiques en cours...\n\nCela peut prendre quelques secondes...")
        
        async def progress_callback(current, total, message):
            progress_text = f"üîÑ Chargement des donn√©es: {current}/{total}\n{message}\n\n"
            if current < total:
                progress_text += "‚ñã" * (current * 20 // total) + "‚ñë" * (20 - current * 20 // total)
            else:
                progress_text += "‚ñã" * 20 + " ‚úÖ Termin√©!"
            results_widget.update(progress_text)
        
        await self.analyzer.charger_donnees(progress_callback)
        
        if self.analyzer.loaded:
            nb_zones = len(self.analyzer.donnees_completes)
            nb_uu = len(self.analyzer.unites_urbaines)
            
            results_widget.update(
                f"‚úÖ Donn√©es charg√©es avec succ√®s!\n\n"
                f"üìä {nb_zones:,} zones g√©ographiques disponibles\n"
                f"üèôÔ∏è  {nb_uu} unit√©s urbaines\n"
                f"üìÖ P√©riode: 2019-2022\n\n"
                f"üí° Entrez une adresse pour commencer l'analyse"
            )
            
            # Remplir la liste des villes
            await self.remplir_liste_villes()
        else:
            results_widget.update("‚ùå Erreur lors du chargement des donn√©es.\nV√©rifiez que les fichiers .shp sont pr√©sents.")
    
    async def remplir_liste_villes(self):
        """Remplit l'onglet des villes"""
        cities_widget = self.query_one("#cities-content")
        
        if not self.analyzer.loaded:
            cities_widget.update("‚ùå Donn√©es non charg√©es")
            return
        
        villes_text = "üèôÔ∏è  UNIT√âS URBAINES DISPONIBLES\n\n"
        
        for i, row in self.analyzer.unites_urbaines.iterrows():
            villes_text += f"{i+1:3d}. {row['libelle_uu']} ({row['code_uu']})\n"
        
        cities_widget.update(villes_text)
    
    async def on_button_pressed(self, event: Button.Pressed) -> None:
        """Gestion des clics sur les boutons"""
        if event.button.id == "analyze-btn":
            await self.analyser_adresse()
        elif event.button.id == "list-btn":
            # Basculer vers l'onglet des villes
            tabbed = self.query_one(TabbedContent)
            tabbed.active = "cities-tab"
        elif event.button.id == "help-btn":
            await self.afficher_aide()
    
    async def on_input_submitted(self, event: Input.Submitted) -> None:
        """Gestion de l'appui sur Entr√©e dans le champ d'adresse"""
        if event.input.id == "address-input":
            await self.analyser_adresse()
    
    async def analyser_adresse(self):
        """Analyse l'adresse saisie"""
        if not self.analyzer.loaded:
            self.query_one("#results-content").update("‚ùå Donn√©es non charg√©es")
            return
        
        address_input = self.query_one("#address-input")
        adresse = address_input.value.strip()
        
        if not adresse:
            self.query_one("#results-content").update("‚ö†Ô∏è  Veuillez entrer une adresse")
            return
        
        results_widget = self.query_one("#results-content")
        results_widget.update(f"üîç G√©olocalisation de: {adresse}\n\n‚è≥ Recherche en cours...")
        
        # G√©ocodage
        lat, lon, adresse_complete = await self.analyzer.geocoder_adresse(adresse)
        
        if lat is None:
            results_widget.update(f"‚ùå Adresse introuvable: {adresse}\n\nEssayez avec une adresse plus pr√©cise.")
            return
        
        results_widget.update(
            f"‚úÖ Position trouv√©e!\n\n"
            f"üìç {adresse_complete}\n"
            f"üåê Coordonn√©es: {lat:.6f}, {lon:.6f}\n\n"
            f"üîç Analyse des zones de cambriolage..."
        )
        
        # Analyse des zones exactes
        zones_exactes = self.analyzer.analyser_zone_dans_polygone(lat, lon)
        
        # Recherche des UU proches
        uu_proches = self.analyzer.trouver_unites_urbaines_proches(lat, lon)
        
        # Construire les r√©sultats
        resultats_text = f"üìç R√âSULTATS POUR: {adresse}\n"
        resultats_text += f"üåê {adresse_complete}\n"
        resultats_text += "‚ïê" * 60 + "\n\n"
        
        # Zones exactes
        if zones_exactes:
            resultats_text += "üéØ LOCALISATION PR√âCISE TROUV√âE!\n\n"
            
            # Extraire la ville de l'adresse g√©ocod√©e pour clarification
            ville_detectee = "Ville inconnue"
            if adresse_complete:
                parts = adresse_complete.split(', ')
                for part in parts:
                    # Chercher une ville fran√ßaise typique
                    if any(keyword in part.lower() for keyword in ['saint-', 'sainte-']) or \
                       any(part.lower().endswith(suffix) for suffix in ['-sur-', '-les-', '-en-']):
                        ville_detectee = part
                        break
                    # Si pas de pattern sp√©cial, prendre le 3√®me √©l√©ment (souvent la ville)
                    elif len(parts) >= 3 and part != parts[0] and part != parts[1]:
                        ville_detectee = part
                        break
            
            for zone in zones_exactes:
                risque_num = zone['risque_num']
                
                if risque_num > 10:
                    emoji, niveau = "üî¥", "√âLEV√â"
                elif risque_num > 5:
                    emoji, niveau = "üü°", "MOYEN"  
                else:
                    emoji, niveau = "üü¢", "FAIBLE"
                
                # Affichage am√©lior√© avec clarification
                if zone['libelle_uu'] == "Paris" and "saint" in ville_detectee.lower():
                    resultats_text += f"üìä Zone dans l'Unit√© Urbaine de {zone['libelle_uu']} ({zone['annee']}):\n"
                    resultats_text += f"   ‚ÑπÔ∏è  Note: {ville_detectee} fait partie de l'agglom√©ration parisienne\n"
                else:
                    resultats_text += f"üìä {zone['libelle_uu']} ({zone['annee']}):\n"
                
                resultats_text += f"   ‚Ä¢ Classe de cambriolage: {zone['classe']}\n"
                resultats_text += f"   ‚Ä¢ Niveau de risque: {emoji} {niveau} ({risque_num:.1f} pour 1000 logements)\n\n"
        
        # UU proches
        if uu_proches:
            resultats_text += f"üó∫Ô∏è  UNIT√âS URBAINES PROCHES ({len(uu_proches)} trouv√©e(s)):\n\n"
            
            for i, uu in enumerate(uu_proches[:5]):
                resultats_text += f"{i+1}. {uu['libelle_uu']} (√† {uu['distance_km']:.1f}km)\n"
                
                # Analyse de cette UU
                analyse = self.analyzer.analyser_unite_urbaine(uu['code_uu'])
                
                if analyse:
                    # Stats r√©centes
                    if '2022' in analyse['analyse_par_annee']:
                        stats_2022 = analyse['analyse_par_annee']['2022']
                        total = stats_2022['total']
                        
                        if total > 0:
                            faible_pct = stats_2022['faible'] * 100 // total
                            eleve_pct = stats_2022['eleve'] * 100 // total
                            moyen_pct = 100 - faible_pct - eleve_pct
                            
                            resultats_text += f"   2022: üü¢{faible_pct}% faible | üü°{moyen_pct}% moyen | üî¥{eleve_pct}% √©lev√©\n"
                
                resultats_text += "\n"
        else:
            resultats_text += "‚ùå Aucune unit√© urbaine trouv√©e dans un rayon de 50km\n"
        
        results_widget.update(resultats_text)
        
        # Remplir l'onglet statistiques
        await self.remplir_statistiques(uu_proches)
        
        self.current_results = {
            'adresse': adresse,
            'coordonnees': (lat, lon),
            'zones_exactes': zones_exactes,
            'uu_proches': uu_proches
        }
    
    async def remplir_statistiques(self, uu_proches):
        """Remplit l'onglet statistiques"""
        stats_widget = self.query_one("#stats-content")
        
        if not uu_proches:
            stats_widget.update("üìä Aucune statistique disponible")
            return
        
        stats_text = "üìä STATISTIQUES D√âTAILL√âES\n\n"
        
        for uu in uu_proches[:3]:  # Top 3
            analyse = self.analyzer.analyser_unite_urbaine(uu['code_uu'])
            
            if not analyse:
                continue
            
            stats_text += f"üèôÔ∏è  {uu['libelle_uu'].upper()}\n"
            stats_text += "‚îÄ" * 40 + "\n"
            
            # √âvolution par ann√©e
            for annee in ['2019', '2020', '2021', '2022']:
                if annee in analyse['analyse_par_annee']:
                    stats = analyse['analyse_par_annee'][annee]
                    total = stats['total']
                    
                    if total > 0:
                        faible_pct = stats['faible'] * 100 // total
                        eleve_pct = stats['eleve'] * 100 // total
                        moyen_pct = 100 - faible_pct - eleve_pct
                        
                        stats_text += f"{annee}: {total:2d} zones - "
                        stats_text += f"üü¢{faible_pct:2d}% üü°{moyen_pct:2d}% üî¥{eleve_pct:2d}%\n"
            
            # Zones √† risque
            zones_risque_recentes = [
                z for z in analyse['zones_a_risque'] 
                if z['annee'] in ['2021', '2022']
            ]
            
            if zones_risque_recentes:
                stats_text += f"\n‚ö†Ô∏è  Zones √† risque √©lev√© (2021-2022):\n"
                for zone in zones_risque_recentes[:3]:
                    stats_text += f"   ‚Ä¢ {zone['annee']}: {zone['classe']}\n"
            
            stats_text += "\n"
        
        stats_widget.update(stats_text)
    
    async def afficher_aide(self):
        """Affiche l'aide"""
        aide_text = """
‚ÑπÔ∏è  AIDE - ANALYSEUR DE CAMBRIOLAGES

üéØ FONCTIONNALIT√âS:
‚Ä¢ G√©olocalisation pr√©cise d'adresses
‚Ä¢ Analyse des taux de cambriolages par zone
‚Ä¢ Donn√©es g√©ographiques infracommunales
‚Ä¢ √âvolution temporelle 2019-2022

üîç UTILISATION:
1. Entrez une adresse fran√ßaise dans le champ
2. Cliquez sur "Analyser" ou appuyez sur Entr√©e
3. Consultez les r√©sultats dans les diff√©rents onglets

üèôÔ∏è  UNIT√âS URBAINES (UU):
Les donn√©es sont organis√©es par Unit√©s Urbaines qui regroupent
les agglom√©rations urbaines continues. Par exemple:
‚Ä¢ Saint-Ouen fait partie de l'UU "Paris"
‚Ä¢ Boulogne-Billancourt fait partie de l'UU "Paris"
‚Ä¢ C'est normal et conforme aux d√©finitions INSEE

üìä NIVEAUX DE RISQUE:
üü¢ FAIBLE: Taux < 5 cambriolages/1000 logements
üü° MOYEN: Taux 5-10 cambriolages/1000 logements  
üî¥ √âLEV√â: Taux > 10 cambriolages/1000 logements

üóÇÔ∏è  ONGLETS:
‚Ä¢ R√©sultats: Analyse principale
‚Ä¢ Statistiques: Donn√©es d√©taill√©es par ville
‚Ä¢ Villes: Liste des unit√©s urbaines disponibles

‚ö° RACCOURCIS:
‚Ä¢ Entr√©e: Lancer l'analyse
‚Ä¢ Ctrl+C: Quitter l'application

üìÖ Source des donn√©es:
Service statistique minist√©riel de la s√©curit√© int√©rieure (SSMSI)
P√©riode: 2019-2022 ‚Ä¢ Granularit√©: Infracommunale
        """
        
        self.query_one("#results-content").update(aide_text)

def main():
    """Point d'entr√©e principal"""
    app = CambriolageApp()
    app.run()

if __name__ == "__main__":
    main()